module Evergreen.Migrate.V5 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V3.Types
import Evergreen.V3.Types.Feature
import Evergreen.V3.Types.Game
import Evergreen.V3.Types.GameState
import Evergreen.V3.Types.Tile
import Evergreen.V5.Types
import Evergreen.V5.Types.Feature
import Evergreen.V5.Types.Game
import Evergreen.V5.Types.GameState
import Evergreen.V5.Types.Tile
import Lamdera.Migrations exposing (..)


frontendModel : Evergreen.V3.Types.FrontendModel -> ModelMigration Evergreen.V5.Types.FrontendModel Evergreen.V5.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V3.Types.BackendModel -> ModelMigration Evergreen.V5.Types.BackendModel Evergreen.V5.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V3.Types.FrontendMsg -> MsgMigration Evergreen.V5.Types.FrontendMsg Evergreen.V5.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V3.Types.ToBackend -> MsgMigration Evergreen.V5.Types.ToBackend Evergreen.V5.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V3.Types.BackendMsg -> MsgMigration Evergreen.V5.Types.BackendMsg Evergreen.V5.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V3.Types.ToFrontend -> MsgMigration Evergreen.V5.Types.ToFrontend Evergreen.V5.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_Feature_Feature : Evergreen.V3.Types.Feature.Feature -> Evergreen.V5.Types.Feature.Feature
migrate_Types_Feature_Feature old =
    case old of
        Evergreen.V3.Types.Feature.City ->
            Evergreen.V5.Types.Feature.City

        Evergreen.V3.Types.Feature.Road ->
            Evergreen.V5.Types.Feature.Road

        Evergreen.V3.Types.Feature.Field ->
            Evergreen.V5.Types.Feature.Field


migrate_Types_FrontendMsg : Evergreen.V3.Types.FrontendMsg -> Evergreen.V5.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V3.Types.NameInputChanged p0 ->
            Evergreen.V5.Types.NameInputChanged p0

        Evergreen.V3.Types.Register ->
            Evergreen.V5.Types.Register

        Evergreen.V3.Types.Kick p0 ->
            Evergreen.V5.Types.Kick p0

        Evergreen.V3.Types.FeInitializeGame ->
            Evergreen.V5.Types.FeInitializeGame

        Evergreen.V3.Types.FeRotateTileLeft ->
            Evergreen.V5.Types.FeRotateTileLeft

        Evergreen.V3.Types.FePlaceTile p0 ->
            Evergreen.V5.Types.FePlaceTile p0

        Evergreen.V3.Types.ClearError ->
            Evergreen.V5.Types.ClearError

        Evergreen.V3.Types.FNoop ->
            Evergreen.V5.Types.FNoop


migrate_Types_GameState_GameState : Evergreen.V3.Types.GameState.GameState -> Evergreen.V5.Types.GameState.GameState
migrate_Types_GameState_GameState old =
    case old of
        Evergreen.V3.Types.GameState.PlaceTile ->
            Evergreen.V5.Types.GameState.PlaceTile

        Evergreen.V3.Types.GameState.PlaceMeeple ->
            Evergreen.V5.Types.GameState.PlaceMeeple

        Evergreen.V3.Types.GameState.Finished ->
            Evergreen.V5.Types.GameState.Finished


migrate_Types_Game_Game : Evergreen.V3.Types.Game.Game -> Evergreen.V5.Types.Game.Game
migrate_Types_Game_Game old =
    { playerScores = old.playerScores
    , players = old.players
    , currentPlayer = old.currentPlayer
    , tileToPlace = old.tileToPlace |> migrate_Types_Tile_Tile
    , gameState = old.gameState |> migrate_Types_GameState_GameState
    , lastPlayedTile = old.lastPlayedTile
    , nextSideId = old.nextSideId
    , tileDrawStack = old.tileDrawStack
    , tileGrid = old.tileGrid |> migrate_Types_Game_TileGrid
    , meepleGrid = old.meepleGrid
    }


migrate_Types_Game_TileGrid : Evergreen.V3.Types.Game.TileGrid -> Evergreen.V5.Types.Game.TileGrid
migrate_Types_Game_TileGrid old =
    old |> Dict.map (\k -> migrate_Types_Tile_Tile)


migrate_Types_Tile_Side : Evergreen.V3.Types.Tile.Side -> Evergreen.V5.Types.Tile.Side
migrate_Types_Tile_Side old =
    { sideId = old.sideId
    , sideFeature = old.sideFeature |> migrate_Types_Feature_Feature
    }


migrate_Types_Tile_Tile : Evergreen.V3.Types.Tile.Tile -> Evergreen.V5.Types.Tile.Tile
migrate_Types_Tile_Tile old =
    { tileId = old.tileId
    , rotation = old.rotation
    , north = old.north |> migrate_Types_Tile_Side
    , east = old.east |> migrate_Types_Tile_Side
    , south = old.south |> migrate_Types_Tile_Side
    , west = old.west |> migrate_Types_Tile_Side
    , hasCloister = old.hasCloister
    }


migrate_Types_ToBackend : Evergreen.V3.Types.ToBackend -> Evergreen.V5.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V3.Types.RegisterPlayer p0 ->
            Evergreen.V5.Types.RegisterPlayer p0

        Evergreen.V3.Types.KickPlayer p0 ->
            Evergreen.V5.Types.KickPlayer p0

        Evergreen.V3.Types.InitializeGame ->
            Evergreen.V5.Types.InitializeGame

        Evergreen.V3.Types.RotateTileLeft ->
            Evergreen.V5.Types.RotateTileLeft

        Evergreen.V3.Types.PlaceTile p0 ->
            Evergreen.V5.Types.PlaceTile p0


migrate_Types_ToFrontend : Evergreen.V3.Types.ToFrontend -> Evergreen.V5.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V3.Types.PlayerRegistrationUpdated p0 ->
            Evergreen.V5.Types.PlayerRegistrationUpdated p0

        Evergreen.V3.Types.PlayerKicked p0 ->
            Evergreen.V5.Types.PlayerKicked p0

        Evergreen.V3.Types.GameInitialized p0 ->
            Evergreen.V5.Types.GameInitialized
                { game = p0.game |> migrate_Types_Game_Game
                }

        Evergreen.V3.Types.UpdateGameState p0 ->
            Evergreen.V5.Types.UpdateGameState
                { game = p0.game |> migrate_Types_Game_Game
                }
